Plan for C course


1. Intro
- C - язык с явной (номинативной) слабой статической типизацией
- creation history
created in 1972 in Bell labs by Denis Ritchie to implement an Unix (dev started in 1969, made with Brian Kernighan and Ken Thompson) to "replace" Multics OS. Uniux was standartised in 1988 as POSIX standart.

Versions:
- main versions: 1978 (K&R, not official), 1989 (ANSI C), 1999, 2011, 2018, 2024
- all versions: 1972 (not official), 1978 (K&R, not official), 1989 (ANSI C), 1990 (ISO C) etc



2. Simple program:
#include <stdio.h>

// int main(void) {                 // -> can receive arguments, but don't use them
// int main() {                     // -> can receive arguments, but don't use them
int main(int agrc, char** argv) {   // -> can receive arguments, uses them
    puts("Hello world!");
    // printf("Hello world!\n");
    return 0;                       // 0 -> result success
}

Compilation1: gcc file_name.c -o executable_name
Compilation2: gcc -Wall -Wextra -Wpedantic -std=c11 file_name.c -o executable_name
Execute: ./executable_name


2.1 Build in types. Numeric types and print to stdout

2.2 Flow control via loops and conditions:
while (condition) { /*stuff*/ }
do { /*stuff*/ } while (condition)
for () { /*stuff*/ }
if (condition1) { /*stuff*/ } else if (condition2) { /*stuff*/ } else { /*stuff*/ }

switch() {
case ...:
    break;
case ...:
case ...:
    break;
default:
}
(if-else vs switch: https://www.youtube.com/watch?v=fjUG_y5ZaL4)

- functions and headers:
modifier return_type function_name(type1 name1, type2 name2, ...) {
    ...
}

H/w (ex01 - ex05)
Print to terminal different geometric figures:
- write a function to draw a chessboard
- write a function draws rectangle 
- write a function that draws triangle
- write a function that draws isosceles non-right triangle


2.3 Macros
- constants
- code generation
- conditional compilation
code after preprocessor: gcc -E source.c -o source.i

2.4 Arrays and pointers:
- pointers: & and *, arithmetic
- endianess (https://en.wikipedia.org/wiki/Endianness)
- arrays
- strings
- string functions

2.5 IO:
- read from terminal: gets(), get_s(), scanf(), getchar() and their problems

- arguments to main:
for (int i = 0; i < argc; i++) {
    puts(argv[i]);
}

H/w (ex06 - ex10)
Print to terminal different geometric figures:
- write a function that requests from user sizes for rectangle (width and height) and draws it
- write a function that requests from user size for triangle (height) and draws it
- write a function that requests from user size for triangle (height) and draws isosceles non-right triangle
- implement anagram (replace symbols in string in revese order). Encoding: ASCII only
- implement anagram with filter (no need to replace digist and non-letters). Encoding: ASCII only


2.6. Types
- derived data types (structures, unions, enums, typedef)
- trailing arrays
- function pointers
- dynamic allocation
- data structures (lists, set)
- hashing

H/w (ex11 - ex12)
- create a generic struct via macros (linked list, array, set) and test it

2.7 Types
- crossplatform types: inttypes.h (stdint.h)
- bitwise operations
- Unicode

H/w (ex13 - ex14)
- support UTF-8 in anagram
- function to count zeros and ones in a binary number
- function to rotate bits of a given number
- function to check whether a number is even or odd using bitwise operator
- function that uses bitwise operations to perform a circular shift on a variable. Declare an unsigned 8-bit integer variable and use bitwise operations to perform a circular shift on the variable. Print the value of the variable before and after the operation.


3. Work with files
- open/close, read/write, fflush, truncate
syscall vs function call: https://www.youtube.com/watch?v=BQJBe4IbsvQ
- opaque pointers
- file descriptors + standart descriptors
- IO operations

H/w (ex15)
- calculate file's CRC
- read a text file and count a word frequency (or symbol frequency). Support ASCII only


4. Sockets https://en.wikipedia.org/wiki/Berkeley_sockets
- server and client sockets

H/w (ex16)
- write a pcapng file with UDP traffic using wireshark. Create 2 programs: UDP server (that counts arrived packets)
and UDP clien, that reads pcapng file, and sends UDP packets from file to your UDP server


4. Compilation
- compilation & linking:
    stage 1 preprocessor:                           gcc -E source.c -o source.i
    stage 2 compilation (to intermediate assembly): gcc -S source.i -o source.s
    stage 3 assembly:                               gcc -c source.s -o source.o
    stage 4 linking:                                gcc source.o -o executable
    compile few files:                              gcc file1.c file2.c file3.c -o executable
- libraries: 
    dynamic:    gcc -Wall -Wextra -Wpedantic file1.c file2.c file3.c -o executable -lm -lpthread -L. liblibrary.so
    * "-L. llibrary" searches for liblibrary.a or liblibrary.so. You can force to use static lib with option "-static"
    static:     gcc -Wall -Wextra -Wpedantic file1.c file2.c file3.c -o executable -L. liblibrary.a
    create a static library:
        *-rdynamic - optional parameter
        gcc -c libfile1.c
        gcc -c libfile2.c
        gcc -c libfile3.c
        ar cr liblibrary.a libfile1.o libfile2.o libfile3.o
    create dynamic library:
        gcc -c -fPIC libfile1.c
        gcc -c -fPIC libfile2.c
        gcc -c -fPIC libfile3.c
        gcc -shared -fPIC -Wall -Wextra -Wpedantic -std=c11 -o liblibrary.so libfile1.o libfile2.o libfile3.o
        -fPIC -> PIC = Position Independent Code
Common compiler options:
    -c - compile, but don't link
    -o - name of output file
    -L - path to directory where to look for libraries
    -I - path to directory where to look for headers
    -g - include debug info in binary file
    -ggdb - include debug info in binary file for GNU debugger only!!
    -ON - optimisation level, where N may be 1, 2, 3
    -rdynamic - include symbols in library object files. Usefull if you going to use library with dlopen or debug

Also you can provide a define with gcc using -D option:
gcc -Wall -Wextra -Wpedantic -DSAY_HELLO ex17_keywords.c ex17_logger.c -o ex17   OR: gcc -DSAY_HELLO ex17_keywords.c ex17_logger.c -o ex17

New keywords:
- static - stores a variable in specific location in memory; variable or function marked with static is local for c-file or function, where it specified
- extern - allows to use a symbol (variable or function) exist in another object file

Examples:
gcc -E ex06_macros.c -o ex06_macros.i
gcc -S ex06_macros.i -o ex06_macros.s
gcc -c ex06_macros.s -o ex06_macros.o
gcc ex06_macros.o -o ex06_macros
./ex06_macros

*for dynamic library:
export LD_LIBRARY_PATH=/path/to/your/libs:$LD_LIBRARY_PATH


5. Instruments
- make, cmake
- mangling https://en.wikipedia.org/wiki/Name_mangling
- valgrind https://alexott.net/ru/writings/prog-checking/Valgrind.html:
    valgrind --leak-check=full --show-leak-kinds=all -- ./a.out args > valgrind_out.txt
    valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose --log-file=valgrind-out.txt ./a.out args
- gbd https://eax.me/gdb/, https://github.com/cyrus-and/gdb-dashboard

H/w (ex18):
- write a make file (or cmake) for your previous homeworks
- test your code with valgrind


6. Processes (ex19 - ex20)
- what is process? https://www.geeksforgeeks.org/memory-layout-of-c-program/
.text   - program itself, RO
.DATA   - initialized global and static variables + constants from defines
.BSS    - uninitialized global and static variables. The BSS segment is zero-initialized by the operating system before the program starts executing. 
It is called "Block Started by Symbol" because the section starts with a symbol that defines the start of the block
.STACK  - memory for your functions
.HEAP   - memory for dynamic allocation

$ size ex01
   text    data     bss     dec     hex filename
   1386     600       8    1994     7ca ./ex01

$ objdump -x /bin/sh
$ readelf -a /bin/sh

ls /proc/<pid>/
top     https://man7.org/linux/man-pages/man1/top.1.html
htop    https://habr.com/ru/articles/316806/

Deeper dive: https://youtu.be/3tr9qinPgYc?t=337

- programm finishing:
void exit(...)              https://man7.org/linux/man-pages/man3/exit.3.html
int at_exit(...)            https://man7.org/linux/man-pages/man3/atexit.3.html
int on_exit(...)            https://man7.org/linux/man-pages/man3/on_exit.3.html
void _exit(...)/_Exit(...)  https://man7.org/linux/man-pages/man2/exit.2.html
void abort(...)             https://man7.org/linux/man-pages/man3/abort.3.html

The C exit() function is a standard library function used to terminate the calling process.
When exit() is called, any open file descriptors belonging to the process are closed and 
any children of the process are inherited by process 1, init, and the process parent is sent a SIGCHLD signal.
It is defined inside the <stdlib.h> header file.

The C abort() function is the standard library function that can be used to exit the C program.
But unlike the exit() function, abort() may not close files that are open.
It may also not delete temporary files and may not flush the stream buffer.
Also, it does not call functions registered with atexit().

- Environment https://pubs.opengroup.org/onlinepubs/7908799/xbd/envvar.html
$ env

- limits https://man7.org/linux/man-pages/man2/getrlimit.2.html
$ ulimit -a

- planner and priorities https://www.man7.org/linux/man-pages/man2/setpriority.2.html


7. IPC
- system
- exec
- fork, wait, pipe, popen       https://linux.die.net/man/2/waitpid
                                https://linux.die.net/man/2/fork
- signals                       https://www.man7.org/linux/man-pages/man2/sigaction.2.html
- local sockets
- fifo, queues, shared memory

- daemons - program that runs as background process without direct interaction with user.
Usualy such process has a suffix d: syslogd, ftpd, sshd etc.
Daemon usualy disconnected from control terminals and user group (to prohibit any interaction with user)
Default contracts:
- lock file in /var/run/daemon_name.pid
- config file in /etc/daemon_name.conf
- launch via /etc/init.d/daemon-name
- reload via SIGHUP
- option to work without daemonisation
Example: https://github.com/jirihnidek/daemon


8. Threads
- pthreads, LWP
- threads vs processes
- sychronisation


9. Networking
- async network interfaces


3. Versions
- https://en.wikipedia.org/wiki/ANSI_C#C9
- GNU extensions: -std=gnu90 / -std=gnu99 / -std=gnu11 / -std=gnu17
- UB (https://habr.com/ru/post/341048, https://habr.com/ru/post/341144, https://habr.com/ru/post/341154)
