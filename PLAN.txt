Plan for C course


1. Intro
- C - язык с явной (номинативной) слабой статической типизацией
- creation history
created in 1972 in Bell labs by Denis Ritchie to implement an Unix (dev started in 1969, made with Brian Kernighan and Ken Thompson) to "replace" Multics OS. Uniux was standartised in 1988 as POSIX standart.

Versions:
- main versions: 1978 (K&R, not official), 1989 (ANSI C), 1999, 2011, 2018, 2024
- all versions: 1972 (not official), 1978 (K&R, not official), 1989 (ANSI C), 1990 (ISO C) etc



2. Simple program:
#include <stdio.h>

// int main(void) {                 // -> can receive arguments, but don't use them
// int main() {                     // -> can receive arguments, but don't use them
int main(int agrc, char** argv) {   // -> can receive arguments, uses them
    puts("Hello world!");
    // printf("Hello world!\n");
    return 0;                       // 0 -> result success
}

Compilation1: gcc file_name.c -o executable_name
Compilation2: gcc -Wall -Wextra -Wpedantic -std=c11 file_name.c -o executable_name
Execute: ./executable_name


2.1 Build in types. Numeric types and print to stdout

2.2 Flow control via loops and conditions:
while (condition) { /*stuff*/ }
do { /*stuff*/ } while (condition)
for () { /*stuff*/ }
if (condition1) { /*stuff*/ } else if (condition2) { /*stuff*/ } else { /*stuff*/ }

switch() {
case ...:
    break;
case ...:
case ...:
    break;
default:
}
(if-else vs switch: https://www.youtube.com/watch?v=fjUG_y5ZaL4)

- functions and headers:
modifier return_type function_name(type1 name1, type2 name2, ...) {
    ...
}

H/w (ex01 - ex05)
Print to terminal different geometric figures:
- write a function to draw a chessboard
- write a function draws rectangle 
- write a function that draws triangle
- write a function that draws isosceles non-right triangle


2.3 Macros
- constants
- code generation
- conditional compilation

2.4 Arrays and pointers:
- pointers: & and *, arithmetic
- endianess (https://en.wikipedia.org/wiki/Endianness)
- arrays
- strings
- string functions

2.5 IO:
- read from terminal: gets(), get_s(), scanf(), getchar() and their problems

- arguments to main:
for (int i = 0; i < argc; i++) {
    puts(argv[i]);
}

H/w (ex06 - ex10)
Print to terminal different geometric figures:
- write a function that requests from user sizes for rectangle (width and height) and draws it
- write a function that requests from user size for triangle (height) and draws it
- write a function that requests from user size for triangle (height) and draws isosceles non-right triangle
- implement anagram (replace symbols in string in revese order). Encoding: ASCII only
- implement anagram with filter (no need to replace digist and non-letters). Encoding: ASCII only


2.6. Types
- derived data types (structures, unions, enums, typedef)
- trailing arrays
- function pointers
- dynamic allocation
- data structures (lists, set)
- hashing

H/w (ex11 - ex12)
- create a generic struct via macros (linked list, array, set) and test it

2.7 Types
- crossplatform types: inttypes.h (stdint.h):
- Unicode

H/w (ex13 - ex14)
- support UTF-8 in anagram


3. Work with files
- open/close, read/write, fflush, truncate
syscall vs function call: https://www.youtube.com/watch?v=BQJBe4IbsvQ
- opaque pointers
- file descriptors + standart descriptors
- IO operations

H/w (ex15)
- calculate file's CRC
- read a text file and count a word frequency (or symbol frequency). Support ASCII only


4. Sockets
- server and client sockets

H/w (ex16)
- write a pcapng file with UDP traffic using wireshark. Create 2 programs: UDP server (that counts arrived packets)
and UDP clien, that reads pcapng file, and sends UDP packets from file to your UDP server


4. Compilation
- compilation
- linking
- libraries, mangling
see also: math.h
- static, extern

5. Instruments
- build: make, cmake
- valgrind
- gbd

6. Processes
- what is process
- process lifecycle, environment, limits (ulimit -a)
- planner and priorities
- daemons

7. IPC
- fork
- exec
- system
- wait
- signals
- pipe
- popen
- fifo
- local sockets
- queues
- semaphores
- shared memory

8. Threads
- pthreads, LWP
- threads vs processes
- sychronisation

9. Networking
- sockets
- async network interfaces

3. Versions
- https://en.wikipedia.org/wiki/ANSI_C#C9
- GNU extensions: -std=gnu90 / -std=gnu99 / -std=gnu11 / -std=gnu17
- UB (https://habr.com/ru/post/341048, https://habr.com/ru/post/341144, https://habr.com/ru/post/341154)
