Plan for C course


1. Intro
- C - язык с явной (номинативной) слабой статической типизацией
- creation history
created in 1972 in Bell labs by Denis Ritchie to implement an Unix (dev started in 1969, made with Brian Kernighan and Ken Thompson) to "replace" Multics OS. Uniux was standartised in 1988 as POSIX standart.

Versions:
- main versions: 1978 (K&R, not official), 1989 (ANSI C), 1999, 2011, 2018, 2024
- all versions: 1972 (not official), 1978 (K&R, not official), 1989 (ANSI C), 1990 (ISO C) etc



2. Simple program:
#include <stdio.h>

// int main(void) {                 // -> can receive arguments, but don't use them
// int main() {                     // -> can receive arguments, but don't use them
int main(int agrc, char** argv) {   // -> can receive arguments, uses them
    puts("Hello world!");
    // printf("Hello world!\n");
    return 0;                       // 0 -> result success
}

Compilation1: gcc file_name.c -o executable_name
Compilation2: gcc -Wall -Wextra -Wpedantic -std=c11 file_name.c -o executable_name
Execute: ./executable_name


2.1 Build in types. Numeric types and print to stdout

2.2 Flow control via loops and conditions (if-else + switch):
while(condition) { /*stuff*/ }, do { /*stuff*/ } while(condition), for () { /*stuff*/ }

if (condition1) { /*stuff*/ } else if (condition2) { /*stuff*/ } else { /*stuff*/ }

switch() {
case ...:
    break;
case ...:
case ...:
    break;
default:

}

- functions and headers:
modifier return_type function_name(type1 name1, type2 name2, ...) {
    ...
}

H/w
Print to terminal different geometric figures:
- write a function to draw a chessboard
- write a function that requests from user sizes for rectangle (width and height) and draws it
- write a function that requests from user size for triangle (height) and draws it
- write a function that requests from user size for triangle (height) and draws isosceles non-right triangle



2.3 Arrays and pointers:
- pointers: & and *, arithmetic
- arrays
- strings
- string functions

2.4 IO:
- read from terminal: gets(), get_s(), scanf(), getchar() and their problems

- arguments to main:
for (int i = 0; i < argc; i++) {
    puts(argv[i]);
}




2.1. Types
- function pointers
- opaque pointers
- dynamic allocation
H/w:
- implement anagram with filter

2.2 Types
- derived data types
    - structures, unions, enums, typedef
- encodings
    - UTF-8
H/w:
- support UTF-8 in anagram

2.3 Marcos
- endianess
- constants
- code generation
H/w:
- create a generic struct via macros (linked list or hash map)

2.4 Crossplatform types: inttypes.h (stdint.h):
int8_t i8 = -1;
uint8_t u8 = 2;

int16_t i16 = -3;
uint16_t u16 = 4;

int32_t i32 = -5;
uint32_t u32 = 6;

printf("Type int8_t: size %lu bytes, val %"PRId8"\n", sizeof(i8), i8);
printf("Type uint8_t: size %lu bytes, val %"PRIu8"\n", sizeof(u8), u8);

printf("Type int16_t: size %lu bytes, val %"PRId16"\n", sizeof(i16), i16);
printf("Type uint16_t: size %lu bytes, val %"PRIu16"\n", sizeof(u16), u16);

printf("Type int32_t: size %lu bytes, val %"PRId32"\n", sizeof(i32), i32);
printf("Type uint32_t: size %lu bytes, val %"PRIu32"\n", sizeof(u32), u32);

see also: sscanf

// bitwise
printf("%d & %d = %d\n", 0, 0, 0 & 0);
printf("%d & %d = %d\n", 0, 1, 0 & 1);
printf("%d & %d = %d\n", 1, 1, 1 & 1);

printf("%d | %d = %d\n", 0, 0, 0 | 0);
printf("%d | %d = %d\n", 0, 1, 0 | 1);
printf("%d | %d = %d\n", 1, 1, 1 | 1);

printf("%d ^ %d = %d\n", 0, 0, 0 ^ 0);
printf("%d ^ %d = %d\n", 0, 1, 0 ^ 1);
printf("%d ^ %d = %d\n", 1, 1, 1 ^ 1);
// bits inversion
printf("~%d = 0x%X\n", 8, ~8);


3. Work with files
- open/close, read/write, fflush, truncate
- file descriptors + standart descriptors
- IO operations
H/w:
- read a text file and count a words frequency (or symbol frequency)

4. Compilation
- preprocessor
- compilation
- linking
- libraries, mangling
see also: math.h
- static, extern

5. Instruments
- build: make, cmake
- valgrind
- gbd

6. Processes
- what is process
- process lifecycle, environment, limits (ulimit -a)
- planner and priorities
- daemons

7. IPC
- fork
- exec
- system
- wait
- signals
- pipe
- popen
- fifo
- local sockets
- queues
- semaphores
- shared memory

8. Treads
- pthreads, LWP
- threads vs processes
- sychronisation

9. Networking
- sockets
- async network interfaces

3. Versions
- https://en.wikipedia.org/wiki/ANSI_C#C9
- GNU extensions: -std=gnu90 / -std=gnu99 / -std=gnu11 / -std=gnu17
- UB (https://habr.com/ru/post/341048, https://habr.com/ru/post/341144, https://habr.com/ru/post/341154)
